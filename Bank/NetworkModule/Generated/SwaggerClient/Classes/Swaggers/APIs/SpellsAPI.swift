//
// SpellsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class SpellsAPI {
    /**

     - parameter name: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter incantation: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func spellsGet(name: String? = nil, type: SpellType? = nil, incantation: String? = nil, completion: @escaping ((_ data: [SpellDto]?,_ error: Error?) -> Void)) {
        spellsGetWithRequestBuilder(name: name, type: type, incantation: incantation).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /Spells
     - 

     - examples: [{contentType=application/json, example=[ {
  "creator" : "creator",
  "light" : "None",
  "effect" : "effect",
  "name" : "name",
  "canBeVerbal" : true,
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "type" : "None",
  "incantation" : "incantation"
}, {
  "creator" : "creator",
  "light" : "None",
  "effect" : "effect",
  "name" : "name",
  "canBeVerbal" : true,
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "type" : "None",
  "incantation" : "incantation"
} ]}]
     - parameter name: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter incantation: (query)  (optional)

     - returns: RequestBuilder<[SpellDto]> 
     */
    open class func spellsGetWithRequestBuilder(name: String? = nil, type: SpellType? = nil, incantation: String? = nil) -> RequestBuilder<[SpellDto]> {
        let path = "/Spells"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "Name": name, 
                        "Type": type, 
                        "Incantation": incantation
        ])


        let requestBuilder: RequestBuilder<[SpellDto]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func spellsIdGet(_id: UUID, completion: @escaping ((_ data: SpellDto?,_ error: Error?) -> Void)) {
        spellsIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /Spells/{id}
     - 

     - examples: [{contentType=application/json, example={
  "creator" : "creator",
  "light" : "None",
  "effect" : "effect",
  "name" : "name",
  "canBeVerbal" : true,
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "type" : "None",
  "incantation" : "incantation"
}}]
     - parameter _id: (path)  

     - returns: RequestBuilder<SpellDto> 
     */
    open class func spellsIdGetWithRequestBuilder(_id: UUID) -> RequestBuilder<SpellDto> {
        var path = "/Spells/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SpellDto>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
